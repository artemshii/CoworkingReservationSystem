// <auto-generated />
using System;
using CoworkingReservation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoworkingReservation.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoworkingReservation.Data.Models.AuthUserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuthUsersData");
                });

            modelBuilder.Entity("CoworkingReservation.Data.Models.DbModels.CoworkingFlags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoworkingUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLanCableAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSoundProof")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberOfPeople")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoworkingUnitId")
                        .IsUnique();

                    b.ToTable("CoworkingFlags");
                });

            modelBuilder.Entity("CoworkingReservation.Data.Models.DbModels.CoworkingPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoworkingUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoworkingUnitId");

                    b.ToTable("CoworkingPhotos");
                });

            modelBuilder.Entity("CoworkingReservation.Data.Models.DbModels.CoworkingUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PricePerHour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CoworkingUnits");
                });

            modelBuilder.Entity("CoworkingReservation.Data.Models.DbModels.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoworkingUnitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CoworkingUnitId");

                    b.HasIndex("StartTime");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("CoworkingReservation.Data.Models.DbModels.CoworkingFlags", b =>
                {
                    b.HasOne("CoworkingReservation.Data.Models.DbModels.CoworkingUnit", "CoworkingUnit")
                        .WithOne("CoworkingFlags")
                        .HasForeignKey("CoworkingReservation.Data.Models.DbModels.CoworkingFlags", "CoworkingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoworkingUnit");
                });

            modelBuilder.Entity("CoworkingReservation.Data.Models.DbModels.CoworkingPhoto", b =>
                {
                    b.HasOne("CoworkingReservation.Data.Models.DbModels.CoworkingUnit", "CoworkingUnit")
                        .WithMany("CoworkingPhotos")
                        .HasForeignKey("CoworkingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoworkingUnit");
                });

            modelBuilder.Entity("CoworkingReservation.Data.Models.DbModels.Reservation", b =>
                {
                    b.HasOne("CoworkingReservation.Data.Models.DbModels.CoworkingUnit", "CoworkingUnit")
                        .WithMany("Reservations")
                        .HasForeignKey("CoworkingUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoworkingUnit");
                });

            modelBuilder.Entity("CoworkingReservation.Data.Models.DbModels.CoworkingUnit", b =>
                {
                    b.Navigation("CoworkingFlags")
                        .IsRequired();

                    b.Navigation("CoworkingPhotos");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
